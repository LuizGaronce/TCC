//******************************************************************************
//MSP430 & único canal de ADC
// Descrição:
//
//Canal analógico A1
// Usar TA1.1 em 1000Hz para conversão
// Resolução de 12 bits
// UART modo A1 com Baud rate de 115200 b/s em 16MHz
// de 1 canal de analógicos
//
//              MSP430FR2676
//        /|\ -------------------------
//         | |                         |
//         --|RST                      |
//           |                         |
//       >---|P3.5/B1                  |
//       >---|P1.0/A0                  |
//       >---|P1.1/A1              P2.7|--> LED1
//       >---|P1.2/A2                  |
//       >---|P1.3/A3                  |
//       >---|P1.4/A4                  |
//       >---|P1.5/A5                  |
//       >---|P1.6/A6                  |
//       >---|P1.7/A7                  |
//       >---|P3.4/CSN             P3.1|--> CE
//       >---|P2.4/SCK                 |
//       >---|P2.6/MISO/UCA1TXD    P2.5|--> MOSI/UCA1RXD
//      <>---|P3.2/SDA                 |
//       >---|P3.6/SCL                 |
//           |                         |
//            -------------------------
//
//******************************************************************************

#include <msp430.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

char vt_chara1[8];

unsigned int ADC_Result;                                     // 12-bit ADC conversion result array
char volta1[] = " ";
char newline[] = " \r\n";

void USCI_A1_config(void);
void GPIO_config(void);
void ADC_config(void);
void TA1_config(void);
void initClockTo16MHz(void);
void ser_output(char *str);
void initClockTo1MHz(void);

void main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

    GPIO_config();
    initClockTo16MHz();
    //initClockTo1MHz();
    ADC_config();
    TA1_config();
    USCI_A1_config();

    UCA1IE |= UCRXIE;           //Local enable for A1 RXIFG
    __enable_interrupt();       //global en for maskables... (GIE bit in SR)

    while(1)
    {
        //ADCCTL0 |= ADCENC | ADCSC;                           // Sampling and conversion start

        //Analógico
        //i = 0;
        //ADCCTL0 |= ADCENC;                               // Enable ADC
        //TA1CTL |= TACLR;                                 // Clear TAR to start the ADC sample-and-conversion
        //__bis_SR_register(LPM0_bits | GIE);              // Enter LPM0 w/ interrupts
        //__no_operation();                                // Only for debugger

        //ADCCTL0 &= ~ADCENC;
        //while (ADCCTL1 & ADCBUSY);
        //ADCCTL1 |= ADCBUSY;
        //TA1CCTL0 |= CCIE;                             // TACCR0 interrupt enabled
        ADCCTL0 |= ADCENC + ADCSC;
        TA1CTL |= TACLR;                                 // Clear TAR to start the ADC sample-and-conversion
        //ADCSA = (unsigned int)ADC_Result;
        //ADCIFG |= ADCTOVIFG;     //levanta a flag de interrupção de ADC

        ser_output(volta1);
        ser_output(ltoa(ADC_Result,vt_chara1,10));
        //ser_output(ADC_Result);
        ser_output(newline);

        P2OUT ^= BIT7;

        //__bis_SR_register(LPM0_bits | GIE);                     // Enter LPM0 w/ interrupts
        //__no_operation();                                       // Only for debugger

        //__delay_cycles(1);          //Delay de 1s
        //__bis_SR_register(LPM0_bits | GIE);                  // LPM0, ADC_ISR will force exit

    }
}

void USCI_A1_config(void)
{
    /**
    UCA1CTLW0 |= UCSWRST;                       //puts UART A1 into SW reset
    UCA1CTLW0 |= UCSSEL__SMCLK;               //BRCLK = SMCLK --> 115200 baud com clock de 1MHz
    UCA1BRW = 8;                              //Prescalar = 0
    UCA1MCTLW = 0xD600;                       //sets low-freq mode + 2nd mod stage
    UCA1CTL1 = UCSSEL_2;                      //Reset = 0 e SEL SMCLK
*/

    UCA1CTLW0 |= UCSWRST;                       //puts UART A1 into SW reset
    UCA1CTLW0 |= UCSSEL__SMCLK;                 //BRCLK = SMCLK --> 115200 baud com clock de 16MHz (Padrão)
    UCA1BRW = 8;                                //Prescalar = 0
    UCA1MCTLW |= UCOS16 | UCBRF_10 | 0xF700;    //0xF700 is UCBRSx = 0xF7 //sets low-freq mode + 2nd mod stage
    UCA1CTL1 = UCSSEL_2;                        //Reset = 0 e SEL SMCLK

}

void initClockTo1MHz(void)
{
    __bis_SR_register(SCG0);                // Disable FLL
    CSCTL3 = SELREF__REFOCLK;               // Set REFO as FLL reference source
    CSCTL1 = DCOFTRIMEN_1 | DCOFTRIM0 | DCOFTRIM1 | DCORSEL_0;// DCOFTRIM=3, DCO Range = 1MHz
    CSCTL2 = FLLD_0 + 30;                   // DCODIV = 1MHz
    __delay_cycles(3);
    __bic_SR_register(SCG0);                // Enable FLL
    //Software_Trim();                        // Software Trim to get the best DCOFTRIM value
    CSCTL4 = SELMS__DCOCLKDIV | SELA__REFOCLK; // set default REFO(~32768Hz) as ACLK source, ACLK = 32768Hz
}                                            // default DCODIV as MCLK and SMCLK source

void initClockTo16MHz(void)
{
    /*// Configure um estado de espera FRAM conforme exigido pela folha de dados do dispositivo para MCLK
    //operação além de 8MHz _antes_ de configurar o sistema de clock.
    FRCTL0 = FRCTLPW | NWAITS_1;

    __bis_SR_register(SCG0);    // disable FLL
    CSCTL3 |= SELREF__XT1CLK;  // Set XT1CLK as FLL reference source
    CSCTL0 = 0;                 // clear DCO and MOD registers
    CSCTL1 &= ~(DCORSEL_7);     // Clear DCO frequency select bits first
    CSCTL1 |= DCORSEL_5;        // Set DCO = 16MHz
    CSCTL2 = FLLD_0 + 487;      // set to fDCOCLKDIV = (FLLN + 1)*(fFLLREFCLK/n) = (487 + 1)*(32.768 kHz/1) = 16 MHz
    __delay_cycles(3);
    __bic_SR_register(SCG0);                        // enable FLL
    while(CSCTL7 & (FLLUNLOCK0 | FLLUNLOCK1));      // FLL locked

    CSCTL4 = SELMS__XT1CLK | SELA__XT1CLK;*/

    // Configure um estado de espera FRAM conforme exigido pela folha de dados do dispositivo para MCLK
        //operação além de 8MHz _antes_ de configurar o sistema de clock.
        FRCTL0 = FRCTLPW | NWAITS_1;

        __bis_SR_register(SCG0);    // disable FLL
        CSCTL3 |= SELREF__REFOCLK;  // Set REFO as FLL reference source
        CSCTL0 = 0;                 // clear DCO and MOD registers
        CSCTL1 &= ~(DCORSEL_7);     // Clear DCO frequency select bits first
        CSCTL1 |= DCORSEL_5;        // Set DCO = 16MHz
        CSCTL2 = FLLD_0 + 487;      // set to fDCOCLKDIV = (FLLN + 1)*(fFLLREFCLK/n)
                                    //                   = (487 + 1)*(32.768 kHz/1)
                                    //                   = 16 MHz
        __delay_cycles(3);
        __bic_SR_register(SCG0);                        // enable FLL
        while(CSCTL7 & (FLLUNLOCK0 | FLLUNLOCK1));      // FLL locked

        CSCTL4 = SELMS__DCOCLKDIV | SELA__REFOCLK;
}

void GPIO_config(void)
{
    //Entrada digital
    P3DIR &= ~BIT5;              //set P3.5 to input (B1)
    P3REN |= BIT5;
    P3OUT |= BIT5;
    P3IES |= BIT5;

    P2DIR |= BIT7;              //set P2.7 to output (LED1)
    P2OUT &= ~BIT7;             //turn off LED1 Initially

    //Setup ports UART TX
    P2SEL1 &= ~BIT6;
    P2SEL0 |= BIT6;
    //Setup ports UART RX
    P2SEL1 &= ~BIT5;
    P2SEL0 |= BIT5;

    // Configure ADC A0 pins
    P1SEL0 |= BIT1;                              //canal A1
    P1SEL1 |= BIT1;                              //canal A1

    // Disable the GPIO power-on default high-impedance mode to activate
    // previously configured port settings
    PM5CTL0 &= ~LOCKLPM5;      //turn on I/O

    UCA1CTLW0 &= ~UCSWRST;      //take UART A1 out of SW reset

    P3IE |= BIT5;               //enable SW1 IRQ
    P3IFG &= ~BIT5;             //Clears flag.
}

void ADC_config(void)
{
    // Configure ADC
    /*ADCCTL0 |= ADCSHT_3 | ADCON;                                // 32ADCclks, ADC ON
    ADCCTL1 |= ADCSHP | ADCSHS_2 | ADCCONSEQ_3;                 // ADC clock MODCLK, sampling timer, TA1.1B trig.,repeat sequence
    ADCCTL2 &= ~ADCRES;                                         // clear ADCRES in ADCCTL
    ADCCTL2 |= ADCRES_2;                                        // 12-bit conversion results
    ADCMCTL0 |= ADCINCH_1 | ADCSREF_1;                          // A1(EoS); Vref=2V
    ADCIE |= ADCIE0;                                            // Enable ADC conv complete interrupt*/

    // Configure ADC12
    ADCCTL0 |= ADCSHT_3 | ADCON;                             // ADCON, 3-S&H=32 ADC clks
    ADCCTL1 |= ADCSHP | ADCSHS_2 | ADCCONSEQ_2;              // ADCCLK = MODOSC; , sampling timer, TA1.1B trig., repeat single channel
    ADCCTL2 &= ~ADCRES;                                      // clear ADCRES in ADCCTL
    ADCCTL2 |= ADCRES_2;                                     // 12-bit conversion results
    //ADCCTL2 &= ~ADCSR;                                       // Taxa de amostragem ADC em 200 ksps
    ADCMCTL0 |= ADCINCH_1| ADCSREF_0;                        // A1 ADC input select; Vref=DVCC
    ADCIE |= ADCIE0;                                         // Enable ADC conv complete interrupt

    // Configure reference
    PMMCTL0_H = PMMPW_H;                                      // Unlock the PMM registers
    PMMCTL2 |= INTREFEN | REFVSEL_0;                          // Enable internal 1.5V reference
    __delay_cycles(400);                                      // Delay 400 ciclos for reference settling

}

//Configura TA1.1B como sinal de disparo ADC
// Nota: O TA1.1B está configurado para 200us 50% PWM, o que irá acionar o ADC
//amostra e conversão a cada 200us. O período do evento de disparo TA1.1B
// deve ser maior que o período de tempo necessário para amostragem e conversão do ADC
// e rotina de serviço de interrupção ADC de cada canal, que é cerca de 57us neste código

void TA1_config(void)       //Configura TA1.1B como sinal de disparo ADC
{
   TA1CCR0 = 2000-1;                                           // PWM Period, 200us
    TA1CCTL1 = OUTMOD_3;                                        // CCR1 reset/set
    TA1CCR1 = 1000;                                              // CCR1 PWM duty cycle, 50%
    TA1CTL = TASSEL__SMCLK | MC__UP | TACLR;                    // SMCLK, up mode, clear TAR

    // ADC conversion trigger signal - TimerA1.1 (32ms ON-period) quero chegar em 1ms
    /*TA1CCR0 = 6800;                                            // PWM Period, 2ms , tava 1000 antes   ,  TA1CCR0 = 66;
    TA1CCTL1 = OUTMOD_3;                                        // CCR1 Set   ,  tava set/reset antes mode 3
    TA1CCR1 = 3500;                                            // TA1.1 ADC trigger - CCR1 PWM duty cycle, 50% , tava 1000 antes   ,   TA1CCR1 = 33;
    TA1CTL = TASSEL__SMCLK | MC__UP | TACLR;                    // SMCLK, up mode, clear TAR ,  TA1CTL = TASSEL__ACLK | MC__UP | TACLR;
*/
}

// Port3_S1 interrupt service routine
#pragma vector = PORT3_VECTOR
__interrupt void ISR_Port3_S1(void)
{
    //position = 0;
    UCA1IE |= UCTXCPTIE;               //turns on tx commplete IRQ
    UCA1IFG &= ~UCTXCPTIFG;            //clears tx complete flag
    //UCA1TXBUF = message[position];      //put first char message
    P3IFG &= ~BIT5;                    //clear flag P3.5
}

// USCI_A1 interrupt service routine
#pragma vector = EUSCI_A1_VECTOR
__interrupt void ISR_EUSCI_A1(void)
{
    if(UCA1RXBUF == 't')                     // Sozinho na interrupção funciona direitinho
    {
        P2OUT^= BIT7;       //toggle LED1
    }
}

// ADC interrupt service routine
#pragma vector=ADC_VECTOR
__interrupt void ADC_ISR(void)
{
    switch(__even_in_range(ADCIV,ADCIV_ADCIFG))
    {
    case ADCIV_NONE:
        break;
    case ADCIV_ADCOVIFG:
        break;
    case ADCIV_ADCTOVIFG:
        break;
    case ADCIV_ADCHIIFG:
        break;
    case ADCIV_ADCLOIFG:
        break;
    case ADCIV_ADCINIFG:
        break;
    case ADCIV_ADCIFG:
        ADC_Result = ADCMEM0;
        //__bic_SR_register_on_exit(LPM0_bits);            // Clear CPUOFF bit from LPM0
        break;
    default:
        break;
    }
}

// Timer A0 interrupt service routine
#pragma vector = TIMER0_A1_VECTOR
__interrupt void Timer_A (void)

{
    P2OUT ^= BIT7;
}

void ser_output(char *str)
{
    while(*str != 0)
    {
        while (!(UCA1IFG & UCTXIFG)); //UCTXCPTIFG
        UCA1TXBUF = *str++;
    }
}
